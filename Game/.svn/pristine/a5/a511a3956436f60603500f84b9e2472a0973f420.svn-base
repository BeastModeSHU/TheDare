#include "Player.h"	
#include <iostream>
Player::Player()
	: Entity(sf::Quads, 4), moveSpeed(200), maxSprint(500), sprintTime(maxSprint)
{

	this->setVertexLocalPosition(0, sf::Vector2f(0.f, 0.f));
	this->setVertexLocalPosition(1, sf::Vector2f(1.f, 0.f));
	this->setVertexLocalPosition(2, sf::Vector2f(1.f, 1.f));
	this->setVertexLocalPosition(3, sf::Vector2f(0.f, 1.f));
	/*

	for (int i(0); i < this->getVertexCount(); ++i)
	this->setVertexColour(i, sf::Color::Green);
	*/
	collider_.width = 35;
	collider_.height = 35;

	sprintRect_.setFillColor(sf::Color::Red); //init sprint rect with colour red
	sprintRect_.setSize(sf::Vector2f(64, 5)); //init sprint rect with width of player and size of 5

}

void Player::update(const sf::Time& delta, const float rotation, const sf::RenderTexture* renderTexture)
{
	updateMovement(delta);
	updateSprintBar(renderTexture);
	updateRotation(rotation);
}

void Player::sprint()
{
	if (sprintTime > 0) //if the sprint timer is greater then 0 then allow sprinting
	{
		moveSpeed = 1000;
		--sprintTime; //decrease sprint timer towards 0
	}
	else
	{
		moveSpeed = 200; //sprint timer is equal or less than 0 change move speed to walking pace
	}

}

void Player::walk()
{

	moveSpeed = 200; //make sure move speed is walking pace
	if (sprintTime < maxSprint) //if sprint timer is less than the max sprint duration then
	{
		sprintTime += 0.5f; //increase sprint timer back up towards the max duration
	}
}

void Player::updateSprintBar(const sf::RenderTexture* renderTexture)
{
	float scaleX = sprintTime / maxSprint; //get percentage of sprint timer
	sprintRect_.setPosition(renderTexture->mapPixelToCoords(sf::Vector2i(10,80)));
	//sprintRect_.setPosition(sf::Vector2f(getGlobalBounds().left, getGlobalBounds().top - 10)); //set the rects position to be just above the player
	sprintRect_.setScale(scaleX, 1); //set the rects size based on sprint timer
}

void Player::updateMovement(const sf::Time& delta)
{
	sf::Vector2f movement(0,0);
	sf::Vector2f direction(0, 0);
	sf::Vector2f colMove;

	const float SIZE(1.5f);

	collider_.top = getPosition().y - collider_.height / 2.f;
	collider_.left = getPosition().x - collider_.width / 2.f;

	if (sf::Keyboard::isKeyPressed(sf::Keyboard::LShift))	//press shift and sprint 
	{
		sprint();
	}
	else //otherwise walk
	{
		walk();
	}

	if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right) || sf::Keyboard::isKeyPressed(sf::Keyboard::Left) || sf::Keyboard::isKeyPressed(sf::Keyboard::Up) || sf::Keyboard::isKeyPressed(sf::Keyboard::Down)
		|| sf::Keyboard::isKeyPressed(sf::Keyboard::A) || sf::Keyboard::isKeyPressed(sf::Keyboard::D) || sf::Keyboard::isKeyPressed(sf::Keyboard::W) || sf::Keyboard::isKeyPressed(sf::Keyboard::S))
	{ //if a directional key is pressed

		if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up) || sf::Keyboard::isKeyPressed(sf::Keyboard::W))
		{//if up key is pressed change direction y vector to -1 and move the y collider above the player
			direction.y = -1;
		}
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down) || sf::Keyboard::isKeyPressed(sf::Keyboard::S))
		{//if down key is pressed change direction y vector to 1 and move the y collider below the player
			direction.y = 1;
		}
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left) || sf::Keyboard::isKeyPressed(sf::Keyboard::A))
		{//if left key is pressed change direction x vector to -1 and move the x collider left of the player
			direction.x = -1;
		}
		if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right) || sf::Keyboard::isKeyPressed(sf::Keyboard::D))
		{//if left key is pressed change direction x vector to 1 and move the x collider right of the player
			direction.x = 1;
		}

		//create a vector that uses the two colliders and the direction to work out collisions
		sf::Vector2f a(direction.x * (delta.asSeconds() * moveSpeed), direction.y * (delta.asSeconds() * moveSpeed));


		movement = (p_tileMap_->getCollisionVector(collider_, a));

		if (movement.x != 0 && movement.y != 0) //if the movement vector is not (0,0)
		{
			sf::Vector2f normalized(normalize(movement));
			movement.x *= fabs(normalized.x);
			movement.y *= fabs(normalized.y);
		}

		move(movement);	//move the player
	}

}

void Player::updateRotation(const float rotation)
{
	setRotation(rotation);
}
