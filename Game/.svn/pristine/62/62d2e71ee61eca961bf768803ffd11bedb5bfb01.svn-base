#include "PlayState.h"

PlayState::PlayState(int STATE_ID, sf::RenderWindow* window, sf::RenderTexture* renderTexture) :
State(STATE_ID, window, renderTexture), bulletIndex(0)
{
	for (int i(0); i < gconsts::Gameplay::MAXBULLETS; i++)
	{
		bullets_[i].setPosition(0, 0);
		bullets_[i].setRotation(0);
		bullets_[i].setScale(10.f, 5.f);
	}
}

PlayState::~PlayState()
{//Deleting class pointers
	deinit();
}

bool PlayState::init()
{
	if (!tmxMap_.loadMap("res//level1.tmx"))
		return(false);

	if (!texture_.loadFromFile("res//entities//gunc.png"))
		return(false);

	if (!dirtyBed_.loadFromFile("res//toxicbarrel.png"))
		return(false);

	tiledMap_.setTMXFile(&tmxMap_);
	tiledMap_.initaliseMap();

	player_.setMap(&tiledMap_);


	player_.setScale(64.f, 64.f);
	player_.setPosition(19 * 64, 105 * 64);
	player_.setOrigin(0.5f, 0.5f);
	player_.setTexture(&texture_);

	player_.setVertexTextureCoords(0, sf::Vector2f(0.f, 0.f));
	player_.setVertexTextureCoords(1, sf::Vector2f(128.f, 0.f));
	player_.setVertexTextureCoords(2, sf::Vector2f(128.f, 128.f));
	player_.setVertexTextureCoords(3, sf::Vector2f(0.f, 128.f));

	const float SIZE(1.5f);

	//player_.collider_.width = player_.getGlobalBounds().width * SIZE;
	//player_.collider_.height = player_.getGlobalBounds().height * SIZE;


	camera_ = new Camera(sf::Vector2u(tmxMap_.getLayer()[0]->width, tmxMap_.getLayer()[0]->width), renderTexture_);
	sf::View v(renderTexture_->getView());
	v.setCenter(tmxMap_.getWidth() * tmxMap_.getTileWidth(), tmxMap_.getHeight() * tmxMap_.getTileHeight());
	v.zoom(0.75f);
	renderTexture_->setView(v);

	{//Loading lights & shaders
		//Load the lightmask texture
		if (!lightTexture_.loadFromFile("res//shaders//torch_light.png"))
			return(false);

		//Create a RenderTexture to draw the lights onto
		if (!lightRenderTxt_.create(renderTexture_->getSize().x, renderTexture_->getSize().y))
			return(false);

		if (!sceneRender_.create(tmxMap_.getTileWidth() * tmxMap_.getWidth(), tmxMap_.getTileHeight() * tmxMap_.getHeight()))
			return(false);

		//Initialising the light RectangleShape
		light_.setTexture(&lightTexture_);
		light_.setSize(sf::Vector2f(static_cast<float>(lightTexture_.getSize().x), static_cast<float>(lightTexture_.getSize().y)));
		//light_.setScale(1.5f, 1.5f);

		if (!shader_.loadFromFile("res///shaders//vertexShader.vert", "res//shaders//fragmentShader.frag"))
			return(false);


		//Set the renderstates to use the correct shader & blend mode
		shaderState_.shader = &shader_;
		shaderState_.blendMode = sf::BlendAlpha;
	}
	id = 0;
	MObjectGroup obj = tmxMap_.getObjectGroup(0);

	objects_.resize(obj.objects.size());

	for (int i(0); i < objects_.size(); ++i)
	{
		objects_[i].setPosition(obj.objects[i].x, obj.objects[i].y);
		//objects_[i].setFillColor(sf::Color::Green);
		objects_[i].setSize(sf::Vector2f( 64, 64) );
		objects_[i].setTexture(&dirtyBed_);
	}
	return(true);
}

void PlayState::render()
{

	renderTexture_->draw(tiledMap_);
	renderTexture_->draw(player_);

	renderTexture_->draw(player_.getSprintRect());

	lightRenderTxt_.clear();
	lightRenderTxt_.setView(renderTexture_->getView());
	lightRenderTxt_.draw(light_, sf::BlendAdd);
	lightRenderTxt_.display();

	shader_.setParameter("lightMapTexture", lightRenderTxt_.getTexture());
	shader_.setParameter("resolution", static_cast<float> (renderTexture_->getSize().x), static_cast<float> (renderTexture_->getSize().y));

	shader_.setParameter("ambientColour", 0.27f, 0.15f, 0.3f, 0.75f);

	sceneRender_.clear(sf::Color::Blue);
	sceneRender_.draw(tiledMap_);
	player_.setOrigin(0.5, 0.5f);
	sceneRender_.draw(player_.col);
	sceneRender_.draw(player_);
	player_.setOrigin(0.f, 0.f);
	sceneRender_.draw(player_.getSprintRect());
	for (int i(0); i < gconsts::Gameplay::MAXBULLETS; i++)
	{
		if (bullets_[i].getAlive())
		{
			sceneRender_.draw(bullets_[i]);
		}
	}
	for (int i(0); i < objects_.size(); ++i)
		sceneRender_.draw(objects_[i]);
	sceneRender_.display();

	sf::Sprite s(sceneRender_.getTexture());
	renderTexture_->draw(s, shaderState_);
	renderTexture_->display();
}

void PlayState::update(const sf::Time& delta)
{
	sf::Vector2i mousePos = sf::Mouse::getPosition(*window_);
	mouseWorldPos_ = renderTexture_->mapPixelToCoords(mousePos);
	sf::Vector2f playerCentrePos(player_.getPosition().x + player_.getGlobalBounds().width / 2, player_.getPosition().y + player_.getGlobalBounds().height / 2);
	sf::Vector2f rot(subtractVector(mouseWorldPos_,player_.getPosition()));
	float rotation = (degrees(atan2(rot.y, rot.x))); //+ 90;

	player_.update(delta, rotation);
	for (int i(0); i < gconsts::Gameplay::MAXBULLETS; i++)
	{
		if (bullets_[i].getAlive())
		{
			bullets_[i].update(delta);
		}
	}

	light_.setPosition(player_.getPosition().x + (player_.getGlobalBounds().width / 2) - (light_.getGlobalBounds().width / 2.f), player_.getPosition().y + (player_.getGlobalBounds().width / 2) - light_.getGlobalBounds().height / 2.f);
	camera_->update(delta, player_.getPosition(), true);
}

void PlayState::handleEvents(sf::Event& evnt, const sf::Time& delta)
{
	if (evnt.type == sf::Event::MouseButtonPressed)
	{
		if (evnt.key.code == sf::Mouse::Left)
		{
			bullets_[bulletIndex].setAlive(true);
			sf::Vector2f rot(subtractVector(mouseWorldPos_, player_.getPosition()));
			bullets_[bulletIndex].init(rot,player_.getPosition());
			bulletIndex++;
			if (bulletIndex > gconsts::Gameplay::MAXBULLETS - 1)
			{
				bulletIndex = 0;
			}
		}

	}
}

void PlayState::deinit()
{
	delete camera_;
}