#include "Player.h"	
#include <iostream>
Player::Player()
	: Entity(sf::Quads, 4), moveSpeed(200), maxSprint(500), sprintTime(maxSprint)
{

	this->setVertexLocalPosition(0, sf::Vector2f(0.f, 0.f));
	this->setVertexLocalPosition(1, sf::Vector2f(1.f, 0.f));
	this->setVertexLocalPosition(2, sf::Vector2f(1.f, 1.f));
	this->setVertexLocalPosition(3, sf::Vector2f(0.f, 1.f));
	/*  

	for (int i(0); i < this->getVertexCount(); ++i)
		this->setVertexColour(i, sf::Color::Green);
		*/
	xCollider.width = 60;		//init colliders size
	xCollider.height = 60;
	yCollider.width = 60;
	yCollider.height = 60;

	sprintRect_.setFillColor(sf::Color::Red); //init sprint rect with colour red
	sprintRect_.setSize(sf::Vector2f(64, 5)); //init sprint rect with width of player and size of 5
	
}

void Player::sprint()
{
	if (sprintTime > 0) //if the sprint timer is greater then 0 then allow sprinting
	{
		moveSpeed = 600;
		--sprintTime; //decrease sprint timer towards 0
	}
	else
	{
		moveSpeed = 200; //sprint timer is equal or less than 0 change move speed to walking pace
	}
	
}

void Player::walk()
{

	moveSpeed = 200; //make sure move speed is walking pace
	if (sprintTime < maxSprint) //if sprint timer is less than the max sprint duration then
	{
		sprintTime += 0.5f; //increase sprint timer back up towards the max duration
	}
}

void Player::updateSprintBar()
{	
	float scaleX = sprintTime / maxSprint; //get percentage of sprint timer
	sprintRect_.setPosition(sf::Vector2f(getGlobalBounds().left, getGlobalBounds().top - 10)); //set the rects position to be just above the player
	sprintRect_.setScale(scaleX, 1); //set the rects size based on sprint timer
}
